"use strict";(self.webpackChunkdocu_notion_sample_site=self.webpackChunkdocu_notion_sample_site||[]).push([[3759],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={title:"Attest Triple",sidebar_position:4,slug:"/13d450d3-7d06-8093-a0ac-cadbfc67ba65"},l="Attest to Triple",o={unversionedId:"Dev-Tools/Contract-Interactions/Attest-Triple",id:"Dev-Tools/Contract-Interactions/Attest-Triple",title:"Attest Triple",description:"13d450d37d068002a2e1c55e1547a2b7}",source:"@site/docs/Dev-Tools/Contract-Interactions/Attest-Triple.md",sourceDirName:"Dev-Tools/Contract-Interactions",slug:"/13d450d3-7d06-8093-a0ac-cadbfc67ba65",permalink:"/13d450d3-7d06-8093-a0ac-cadbfc67ba65",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Attest Triple",sidebar_position:4,slug:"/13d450d3-7d06-8093-a0ac-cadbfc67ba65"},sidebar:"tutorialSidebar",previous:{title:"Attest Atom",permalink:"/13d450d3-7d06-8073-99f6-cd3de716ace9"},next:{title:"GraphQL API Reads",permalink:"/133450d3-7d06-8025-8e48-fdb17c025d33"}},s={},p=[{value:"Context",id:"13d450d37d068043b433decfc8194921",level:2},{value:"depositTriple",id:"13d450d37d0680569565f957d9bc28f3",level:2},{value:"Parameters",id:"13d450d37d06809d8610d737e70114ef",level:3},{value:"Implementation",id:"13d450d37d0680d7be89dae27a1eb897",level:3},{value:"redeemTriple",id:"13d450d37d06809aa8c3db6b39e49ba8",level:2},{value:"Parameters",id:"13d450d37d0680b895bde628ffcfcc23",level:3},{value:"Implementation",id:"13d450d37d0680fba516ea79f89d5c6c",level:3},{value:"Triple Vaults",id:"13d450d37d0680b3bc9cc751dcbecccd",level:2},{value:"Cost Considerations",id:"13d450d37d06800384b0ef6e428b7bcd",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"13d450d37d068002a2e1c55e1547a2b7"},"Attest to Triple"),(0,i.kt)("p",null,"Attestations in the Intuition system allow users to signal their agreement or disagreement with Triples by depositing ETH into either the positive or negative vault. Each deposit represents a stake in the Triple's validity, with the ability to redeem these stakes later."),(0,i.kt)("h2",{id:"13d450d37d068043b433decfc8194921"},"Context"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"depositTriple")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"redeemTriple")," functions are part of the EthMultiVault contract, which manages the staking and signaling mechanisms for Triples. When attesting to a Triple, users deposit ETH into either the positive or negative vault, receiving shares proportional to their deposit. These shares can later be redeemed to withdraw the original deposit plus any accrued rewards or minus any losses."),(0,i.kt)("p",null,"For example, given the Triple:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Subject: "Bob" (Atom ID: "1")'),(0,i.kt)("li",{parentName:"ul"},'Predicate: "is" (Atom ID: "2")'),(0,i.kt)("li",{parentName:"ul"},'Object: "Trustworthy" (Atom ID: "3")')),(0,i.kt)("p",null,"Users can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Deposit into the positive vault to agree with "Bob is Trustworthy"'),(0,i.kt)("li",{parentName:"ul"},'Deposit into the negative vault to disagree with "Bob is Trustworthy"'),(0,i.kt)("li",{parentName:"ul"},"Not deposit to remain neutral")),(0,i.kt)("h2",{id:"13d450d37d0680569565f957d9bc28f3"},"depositTriple"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function depositTriple(\n    address receiver,\n    uint256 id\n) external payable nonReentrant whenNotPaused returns (uint256)\n\n")),(0,i.kt)("h3",{id:"13d450d37d06809d8610d737e70114ef"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receiver"),": Address to receive the vault shares"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": Vault ID of the Triple (positive or negative vault)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": Amount of ETH to deposit"),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"uint256")," - Amount of shares received")),(0,i.kt)("h3",{id:"13d450d37d0680d7be89dae27a1eb897"},"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// useDepositTriple Hook\nimport { type GetContractReturnType } from 'viem'\nimport { base } from 'viem/chains'\nimport { useContractWriteAndWait } from './useContractWriteAndWait'\nimport { useMultivaultContract } from './useMultivaultContract'\n\nexport const useDepositTriple = () => {\n  const multivault = useMultivaultContract(\n    base.id\n  ) as GetContractReturnType\n\n  return useContractWriteAndWait({\n    ...multivault,\n    functionName: 'depositTriple',\n  })\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Usage Example\nconst {\n  writeAsync: writeDepositTriple,\n  awaitingWalletConfirmation,\n  awaitingOnChainConfirmation,\n} = useDepositTriple()\n\nasync function handleDepositTriple(tripleId: string, amount: bigint, isPositive: boolean) {\n  if (!awaitingOnChainConfirmation && !awaitingWalletConfirmation && writeDepositTriple) {\n    try {\n      // Get the appropriate vault ID based on positive/negative attestation\n      const vaultId = isPositive ? tripleId : await getCounterIdFromTriple(tripleId)\n\n      const tx = await writeDepositTriple({\n        address: MULTIVAULT_CONTRACT_ADDRESS,\n        abi: multivaultAbi,\n        functionName: 'depositTriple',\n        args: [address, BigInt(vaultId)],\n        value: amount,\n      })\n\n      if (tx?.hash) {\n        const receipt = await publicClient.waitForTransactionReceipt({\n          hash: tx.hash,\n        })\n        // Handle success\n      }\n    } catch (error) {\n      // Handle error\n    }\n  }\n}\n\n")),(0,i.kt)("h2",{id:"13d450d37d06809aa8c3db6b39e49ba8"},"redeemTriple"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function redeemTriple(\n    uint256 shares,\n    address receiver,\n    uint256 id\n) external nonReentrant returns (uint256)\n\n")),(0,i.kt)("h3",{id:"13d450d37d0680b895bde628ffcfcc23"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"shares"),": Number of vault shares to redeem"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receiver"),": Address to receive the redeemed ETH"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": Vault ID of the Triple (positive or negative vault)"),(0,i.kt)("li",{parentName:"ul"},"Returns: ",(0,i.kt)("inlineCode",{parentName:"li"},"uint256")," - Amount of ETH received")),(0,i.kt)("h3",{id:"13d450d37d0680fba516ea79f89d5c6c"},"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// useRedeemTriple Hook\nimport { type GetContractReturnType } from 'viem'\nimport { base } from 'viem/chains'\nimport { useContractWriteAndWait } from './useContractWriteAndWait'\nimport { useMultivaultContract } from './useMultivaultContract'\n\nexport const useRedeemTriple = () => {\n  const multivault = useMultivaultContract(\n    base.id\n  ) as GetContractReturnType\n\n  return useContractWriteAndWait({\n    ...multivault,\n    functionName: 'redeemTriple',\n  })\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Usage Example\nconst {\n  writeAsync: writeRedeemTriple,\n  awaitingWalletConfirmation,\n  awaitingOnChainConfirmation,\n} = useRedeemTriple()\n\nasync function handleRedeemTriple(tripleId: string, shares: bigint, isPositive: boolean) {\n  if (!awaitingOnChainConfirmation && !awaitingWalletConfirmation && writeRedeemTriple) {\n    try {\n      // Get the appropriate vault ID based on positive/negative attestation\n      const vaultId = isPositive ? tripleId : await getCounterIdFromTriple(tripleId)\n\n      const tx = await writeRedeemTriple({\n        address: MULTIVAULT_CONTRACT_ADDRESS,\n        abi: multivaultAbi,\n        functionName: 'redeemTriple',\n        args: [shares, address, BigInt(vaultId)],\n      })\n\n      if (tx?.hash) {\n        const receipt = await publicClient.waitForTransactionReceipt({\n          hash: tx.hash,\n        })\n        // Handle success\n      }\n    } catch (error) {\n      // Handle error\n    }\n  }\n}\n\n")),(0,i.kt)("h2",{id:"13d450d37d0680b3bc9cc751dcbecccd"},"Triple Vaults"),(0,i.kt)("p",null,"Each Triple has two associated vaults:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Positive Vault"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Used for agreeing with the Triple's statement"),(0,i.kt)("li",{parentName:"ul"},"Shares represent support for the claim"),(0,i.kt)("li",{parentName:"ul"},"Value increases with positive attestations"),(0,i.kt)("li",{parentName:"ul"},"ID is the same as the Triple's ID"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Negative Vault"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Used for disagreeing with the Triple's statement"),(0,i.kt)("li",{parentName:"ul"},"Shares represent opposition to the claim"),(0,i.kt)("li",{parentName:"ul"},"Value increases with negative attestations"),(0,i.kt)("li",{parentName:"ul"},"ID can be retrieved using ",(0,i.kt)("inlineCode",{parentName:"li"},"getCounterIdFromTriple(tripleId)"))))),(0,i.kt)("p",null,"Users can only attest to one vault at a time for a given Triple. To switch positions, users must first redeem their shares from one vault before depositing into the other."),(0,i.kt)("h2",{id:"13d450d37d06800384b0ef6e428b7bcd"},"Cost Considerations"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Deposit Fees"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Entry fee: Percentage taken from deposit"),(0,i.kt)("li",{parentName:"ul"},"Protocol fee: Portion sent to protocol treasury"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Redemption Fees"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Exit fee: Percentage taken from withdrawal"),(0,i.kt)("li",{parentName:"ul"},"Protocol fee: Portion sent to protocol treasury")))),(0,i.kt)("p",null,"See also:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/136450d3-7d06-80e2-b4ff-fe8d6417e5d2"},"Signal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/primitives"},"Primitives")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/130450d3-7d06-803e-9833-fff21c847507"},"EthMultiVault.sol"))))}u.isMDXComponent=!0}}]);