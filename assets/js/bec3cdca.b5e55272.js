"use strict";(self.webpackChunkdocu_notion_sample_site=self.webpackChunkdocu_notion_sample_site||[]).push([[3282],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1879:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={title:"GraphQL Mutations",sidebar_position:0,slug:"/mutations"},o=void 0,s={unversionedId:"GraphQL-API/Writes/mutations",id:"GraphQL-API/Writes/mutations",title:"GraphQL Mutations",description:"Our GraphQL API provides convenient mutations to help structure and publish Atom metadata following common schemas and best practices. While the protocol supports any URI scheme, these mutations offer an opinionated approach to creating well-structured, interoperable data.",source:"@site/docs/dev/GraphQL-API/Writes/mutations.md",sourceDirName:"GraphQL-API/Writes",slug:"/mutations",permalink:"/dev/mutations",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"GraphQL Mutations",sidebar_position:0,slug:"/mutations"},sidebar:"contractsSidebar",previous:{title:"GraphQL API Example Queries",permalink:"/dev/graphql-examples"},next:{title:"Reads",permalink:"/dev/subgraphs-reads"}},l={},p=[{value:"Current Schema Support",id:"163450d37d0681ceb380dd9566e2036a",level:2},{value:"Example Usage",id:"163450d37d0681cb8470d64506980d6e",level:3},{value:"Upcoming Schema Support",id:"163450d37d0681c0bb7bf12a002cadba",level:2},{value:"Best Practices",id:"163450d37d068129af74c93e3a2cd78a",level:2},{value:"Example Workflows",id:"163450d37d0681599422f6272b099db7",level:2},{value:"Basic Thing Creation",id:"163450d37d0681d09ee7d4bef5906100",level:3},{value:"TypeScript Integration",id:"163450d37d06815eb032e1115d97571c",level:2},{value:"Future Schema Support",id:"163450d37d0681e1a978fc9bebe93acf",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Our GraphQL API provides convenient mutations to help structure and publish Atom metadata following common schemas and best practices. While the protocol supports any URI scheme, these mutations offer an opinionated approach to creating well-structured, interoperable data."),(0,r.kt)("h2",{id:"163450d37d0681ceb380dd9566e2036a"},"Current Schema Support"),(0,r.kt)("p",null,"Currently, our default schema is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Thing")," schema. This provides essential properties for describing any entity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation UploadThing(\n  $name: String!\n  $description: String!\n  $image: String!\n  $url: String!\n) {\n  uploadThing(\n    arg1: { name: $name, description: $description, image: $image, url: $url }\n  ) {\n    cid\n  }\n}\n\n")),(0,r.kt)("h3",{id:"163450d37d0681cb8470d64506980d6e"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "My First Thing",\n  "description": "This is an example description",\n  "image": "ipfs://Qm...", // IPFS URI for image\n  "url": "<https://example.com>" // Reference URL\n}\n\n')),(0,r.kt)("p",null,"The mutation returns an IPFS CID that can be used when creating an Atom:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const { cid } = await uploadThing(thingData)\nconst atomId = await createAtom(cid)\n\n")),(0,r.kt)("h2",{id:"163450d37d0681c0bb7bf12a002cadba"},"Upcoming Schema Support"),(0,r.kt)("p",null,"We are actively expanding our mutation support to include schemas from ",(0,r.kt)("a",{parentName:"p",href:"https://schema.org/docs/schemas.html"},"schema.org"),".\nAdditionally, we'll be adding support for CAIP-10 addresses to enable cross-chain identity resolution."),(0,r.kt)("h2",{id:"163450d37d068129af74c93e3a2cd78a"},"Best Practices"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Complete Metadata"),": Provide as much relevant metadata as possible to improve the Atom's utility across different contexts."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Persistent Storage"),": All metadata is stored on IPFS, ensuring data availability and immutability."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"URI Standards"),": Use standard URI formats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"IPFS: ",(0,r.kt)("inlineCode",{parentName:"li"},"ipfs://Qm...")),(0,r.kt)("li",{parentName:"ul"},"HTTP(S): ",(0,r.kt)("inlineCode",{parentName:"li"},"https://...")),(0,r.kt)("li",{parentName:"ul"},"CAIP-10 (coming soon): ",(0,r.kt)("inlineCode",{parentName:"li"},"eip155:1:0x..."))))),(0,r.kt)("h2",{id:"163450d37d0681599422f6272b099db7"},"Example Workflows"),(0,r.kt)("h3",{id:"163450d37d0681d09ee7d4bef5906100"},"Basic Thing Creation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// 1. Upload metadata\nconst thingData = {\n  name: 'Example Thing',\n  description: 'Description...',\n  image: 'ipfs://Qm...',\n  url: 'https://...',\n}\n\nconst { cid } = await uploadThing(thingData)\n\n// 2. Create Atom with returned CID\nconst atomId = await createAtom(cid)\n\n")),(0,r.kt)("h2",{id:"163450d37d06815eb032e1115d97571c"},"TypeScript Integration"),(0,r.kt)("p",null,"We maintain a package, ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql")," within our ",(0,r.kt)("inlineCode",{parentName:"p"},"intuition-ts")," monorepo that auto-generates TypeScript types and React hooks to make integrations easier. This includes type-safe mutations, queries, and React hooks for all supported schemas. We are actively finalizing patterns to properly externalize this package, which will be released shortly. This guide will be updated to provide example implementations once the package is released."),(0,r.kt)("h2",{id:"163450d37d0681e1a978fc9bebe93acf"},"Future Schema Support"),(0,r.kt)("p",null,"We are also actively expanding our mutation support to include schemas from ",(0,r.kt)("a",{parentName:"p",href:"https://schema.org/docs/schemas.html"},"schema.org")," as well as CAIP-10 addresses to enable cross-chain identity resolution."))}d.isMDXComponent=!0}}]);