"use strict";(self.webpackChunkdocu_notion_sample_site=self.webpackChunkdocu_notion_sample_site||[]).push([[6788],{3905:(n,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>m});var t=a(7294);function i(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function r(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function o(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){i(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function l(n,e){if(null==n)return{};var a,t,i=function(n,e){if(null==n)return{};var a,t,i={},r=Object.keys(n);for(t=0;t<r.length;t++)a=r[t],e.indexOf(a)>=0||(i[a]=n[a]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)a=r[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(i[a]=n[a])}return i}var d=t.createContext({}),s=function(n){var e=t.useContext(d),a=e;return n&&(a="function"==typeof n?n(e):o(o({},e),n)),a},p=function(n){var e=s(n.components);return t.createElement(d.Provider,{value:e},n.children)},g={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},c=t.forwardRef((function(n,e){var a=n.components,i=n.mdxType,r=n.originalType,d=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),c=s(a),m=i,u=c["".concat(d,".").concat(m)]||c[m]||g[m]||r;return a?t.createElement(u,o(o({ref:e},p),{},{components:a})):t.createElement(u,o({ref:e},p))}));function m(n,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=a.length,o=new Array(r);o[0]=c;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=n,l.mdxType="string"==typeof n?n:i,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},547:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var t=a(7462),i=(a(7294),a(3905));const r={title:"GraphQL API Example Queries",sidebar_position:1,slug:"/graphql-writes2"},o="GraphQL API Example Queries",l={unversionedId:"Dev-Tools/GraphQL-API/Reads/graphql-writes2",id:"Dev-Tools/GraphQL-API/Reads/graphql-writes2",title:"GraphQL API Example Queries",description:"131450d37d0680de838be0afe8525d65}",source:"@site/docs/concepts/Dev-Tools/GraphQL-API/Reads/graphql-writes2.md",sourceDirName:"Dev-Tools/GraphQL-API/Reads",slug:"/graphql-writes2",permalink:"/fr/graphql-writes2",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"GraphQL API Example Queries",sidebar_position:1,slug:"/graphql-writes2"},sidebar:"contractsSidebar",previous:{title:"GraphQL API Reads",permalink:"/fr/graphql-reads2"},next:{title:"GraphQL Mutations",permalink:"/fr/mutations2"}},d={},s=[{value:"Atom Queries",id:"131450d37d0680bf847dd2c81abf03b0",level:2},{value:"GetAtoms",id:"131450d37d06808296a8e7435b6801b9",level:3},{value:"GetAtom",id:"131450d37d0680e78415e6328c9c3b82",level:3},{value:"Account Queries",id:"131450d37d0680f985c5fd3f7f9d8f6c",level:2},{value:"GetAccounts",id:"131450d37d068078a82af53da40112d9",level:3},{value:"GetAccount",id:"131450d37d0680a1889fefa6fcbb09f8",level:3},{value:"Triple Queries",id:"131450d37d0680eeb2a6da2841c51f51",level:2},{value:"GetTriples",id:"131450d37d06803492e4e232713568c8",level:3},{value:"GetTriple",id:"131450d37d06803a9edcec28edd52204",level:3},{value:"Positions",id:"131450d37d0680fb8794f84f731c13ed",level:2},{value:"GetPositions",id:"131450d37d0680b8a990ff417d678766",level:3},{value:"GetPosition",id:"131450d37d0680abb074da321b5f0ddd",level:3},{value:"Vaults",id:"131450d37d06802483d7c2dc75c5ce86",level:2},{value:"GetVaults",id:"131450d37d0680fd8298d771fa3004de",level:3},{value:"GetVault",id:"131450d37d0680efb2dcc8c29c493702",level:3},{value:"\u201cUtility\u201d Queries",id:"131450d37d06808d8afeebe09521412e",level:2},{value:"GetEvents",id:"131450d37d0680379ff6ef4f91d25816",level:3}],p={toc:s};function g(n){let{components:e,...a}=n;return(0,i.kt)("wrapper",(0,t.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"131450d37d0680de838be0afe8525d65"},"GraphQL API Example Queries"),(0,i.kt)("p",null,"This page contains some example queries to get you started exploring Intuition data. You can run these queries directly in the embedded playground on the ",(0,i.kt)("a",{parentName:"p",href:"/graphql-reads2"},"previous page"),"."),(0,i.kt)("p",null,"For ease of exploration these example queries have the GraphQL fragments included and contain a robust set of fields. We encourage you to open the Apollo Explorer links and interact with each query."),(0,i.kt)("p",null,"If you\u2019re looking for a thorough, robust view into our published queries we recommended experimenting with our GraphQL package in our monorepo: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/0xIntuition/intuition-ts/tree/main/packages/graphql"},"https://github.com/0xIntuition/intuition-ts/tree/main/packages/graphql")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This package is published on ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npm")," and contains fragments, queries, and typesafe query documents and hooks that can be integrated into a React/Node app.")),(0,i.kt)("h2",{id:"131450d37d0680bf847dd2c81abf03b0"},"Atom Queries"),(0,i.kt)("p",null,"There are two primary queries available for retrieving ",(0,i.kt)("inlineCode",{parentName:"p"},"Atom")," data:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetAtoms"),": Retrieves a collection of atoms based on specified filters and parameters"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetAtom"),": Fetches a single atom by its unique identifier (",(0,i.kt)("inlineCode",{parentName:"li"},"id"),")")),(0,i.kt)("p",null,"These ",(0,i.kt)("inlineCode",{parentName:"p"},"Atom")," queries are foundational and are used in more complex queries to retrieve data from the Intuition protocol."),(0,i.kt)("h3",{id:"131450d37d06808296a8e7435b6801b9"},"GetAtoms"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetAtoms(\n  $limit: Int\n  $offset: Int\n  $orderBy: [atoms_order_by!]\n  $where: atoms_bool_exp\n) {\n  atoms_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  atoms(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) {\n    # AtomMetadata fields\n    data\n    id\n    image\n    label\n    emoji\n    type\n    creator {\n      id\n      label\n      image\n    }\n    value {\n      person {\n        name\n        image\n        description\n        url\n      }\n      thing {\n        name\n        image\n        description\n        url\n      }\n      organization {\n        name\n        image\n        description\n        url\n      }\n    }\n\n    # AtomTxn fields\n    blockNumber\n    blockTimestamp\n    transactionHash\n    creatorId\n\n    # AtomVaultDetails fields\n    vaultId\n    walletId\n    vault {\n      positionCount\n      totalShares\n      currentSharePrice\n      positions_aggregate {\n        aggregate {\n          count\n          sum {\n            shares\n          }\n        }\n      }\n      positions {\n        id\n        account {\n          label\n          id\n        }\n        shares\n      }\n    }\n\n    # AtomTriple fields\n    asSubject {\n      id\n      label\n      object {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      predicate {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n    }\n    asPredicate {\n      id\n      label\n      subject {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      object {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n    }\n    asObject {\n      id\n      label\n      subject {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      predicate {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n    }\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoCCKEcAzgBQA6SRRAJADYCWcXK6RAJKpmrNhABmE2uQHCUo9hDxh8AIQICA2gENqdAPrLVeAwCMCAQgC6itgHcAFvgQC9NWuYgQOBhAA8AB2YASiJgRXc6em5efnZYvgAaIklpWSUpGRQU43xzTSUVdQIUpxcBB2c8BDCIllYiAGIiKhoAWXIdMD0dIgkuBA4wWkVWHpQdMaIuMGmeHQBzBGmOHTMh6YQ4CAArLmmUAkCVhtZplra4ABV-FgGhkemzDmgAawA5eA28Z9eoN7XHgIWiTODBM5EFB4HRIWg6KAoLgQJAACR0tEc0ygNXceEEc0hF1a%2BgAajoYBwUAARLpcDi0fqDYajSEANwpVIJ03sOg4HHI3PZnJQ4WmrECEFofGRSAAwhAYCJIaxqJMOABlRw6GqsxqNWB4GqoLU6hAABTwXCgp31AF9psS5bjqHgmY89QaXcoxSqZoT9axumBdZ79TAZHgkDpEOKiDiEHoEGADHo4zBAhNk6mFJCHQ183aQEkQByresBbQMCAQHagA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h3",{id:"131450d37d0680e78415e6328c9c3b82"},"GetAtom"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetAtom($id: numeric!) {\n  atom(id: $id) {\n     # AtomMetadata fields\n    data\n    id\n    image\n    label\n    emoji\n    type\n    creator {\n      id\n      label\n      image\n    }\n    value {\n      person {\n        name\n        image\n        description\n        url\n      }\n      thing {\n        name\n        image\n        description\n        url\n      }\n      organization {\n        name\n        image\n        description\n        url\n      }\n    }\n\n    # AtomTxn fields\n    blockNumber\n    blockTimestamp\n    transactionHash\n    creatorId\n\n    # AtomVaultDetails fields\n    vaultId\n    walletId\n    vault {\n      positionCount\n      totalShares\n      currentSharePrice\n      positions_aggregate {\n        aggregate {\n          count\n          sum {\n            shares\n          }\n        }\n      }\n      positions {\n        id\n        account {\n          label\n          id\n        }\n        shares\n      }\n    }\n\n    # AtomTriple fields\n    asSubject {\n      id\n      label\n      object {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      predicate {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n    }\n    asPredicate {\n      id\n      label\n      subject {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      object {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n    }\n    asObject {\n      id\n      label\n      subject {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      predicate {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n    }\n  }\n}\n\n    # Triples\n    triplesSubjectTotal: asSubject_aggregate {\n      aggregate {\n        count\n      }\n    }\n    asSubject {\n      subject {\n        id\n        data\n        image\n        label\n        value {\n          person {\n            name\n            image\n            description\n            url\n          }\n          thing {\n            name\n            image\n            description\n            url\n          }\n          organization {\n            name\n            image\n            description\n            url\n          }\n        }\n      }\n    }\n\n    triplesPredicateTotal: asPredicate_aggregate {\n      aggregate {\n        count\n      }\n    }\n\n    triplesObjectTotal: asObject_aggregate {\n      aggregate {\n        count\n      }\n    }\n\n    # Positions\n  }\n}\n\n# Variables\n{\n  "atomId": "2"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoCCKEcAFADpJFEAkAhtXAJJjpFLx8ASygBCRgEoiwRsw41aQ3q3ncwUmU2ZEAxESo0AsuTZgObIgDMhCADZgAzrO1LnzIXDYBzBG6K22ACM7PwQ4CAArIT8UAgAHXy1mPz0DOAAVAA8maztHP0DbaABrADl4YLwCoqhi9I8EBxQ2ODiYvDYkBzYoFCEIJAAJNgcACz8oPAR5PB4-FP1OADU2GFsUABETIVsHKxt7JySiADdV9bnjgHc2W1tyS%2B1T85RpP2Y4iAchPoGAYQgMFQ7yI1GatgAyqM2FMjk9mLA8FNUFCYQgAAp4ESJJ4AX3mxz0fymM32eTh2km02oeDex3cYBBAWCthBHm8OO0%2BK03NxIAANCAzligvcHBgQJpkiBVHMMER6CAAEyKxh83FAA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h2",{id:"131450d37d0680f985c5fd3f7f9d8f6c"},"Account Queries"),(0,i.kt)("p",null,"There are two primary queries available for retrieving ",(0,i.kt)("inlineCode",{parentName:"p"},"Account")," data:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetAccounts"),": Retrieves a collection of atoms based on specified filters and parameters"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetAccount"),": Fetches a single atom by its unique identifier (",(0,i.kt)("inlineCode",{parentName:"li"},"address"),")")),(0,i.kt)("p",null,"We have more supporting ",(0,i.kt)("inlineCode",{parentName:"p"},"Account")," queries in our GraphQL package."),(0,i.kt)("h3",{id:"131450d37d068078a82af53da40112d9"},"GetAccounts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetAccounts {\n  accounts {\n    # AccountMetadata fields\n    label\n    image\n    id\n    atomId\n    type\n\n    # AccountClaims fields\n    claims(order_by: { shares: desc }) {\n      triple {\n        id\n        label\n      }\n      shares\n      counterShares\n    }\n\n    # AccountPositions fields\n    positions(order_by: { shares: desc }) {\n      id\n      shares\n      vault {\n        id\n        totalShares\n        currentSharePrice\n        atom {\n          id\n          label\n        }\n        triple {\n          id\n          label\n        }\n      }\n    }\n    atom {\n      vaultId\n      walletId\n      vault {\n        positionCount\n        totalShares\n        positions_aggregate {\n          aggregate {\n            count\n            sum {\n              shares\n            }\n          }\n        }\n        positions {\n          id\n          account {\n            label\n            id\n          }\n          shares\n        }\n      }\n    }\n  }\n}\n\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoCCUUEMqAzkcADpJFECG1tDTr77AMREqNOigCy5DmA4oORAGYBLBABsw9fgLUcARuu3tlcDgHMERosrBW5EOAElbbASgIAHS0ivDRPFABhXRNGFXVNKygQuHoACgg8MHwAfT0CdCYiegALDjwEekzk%2BigiAF8ASj5XASIUPGUPNQQaurqbKzrdAzUuiv7c-ML%2BsVR8AGU8gq1agZ85v25xAAUIemUUZQgkMNUNWbqPdc3t3YSk1PTM4GzpwuLCsqq29s659iGZ-oA3Dhg1ChXu1rC4QewUBB5GopsNDuDYHgCqhYQUVo0oN5wZxIXBgeD3tj2D1DB8BOV%2BhDGs1WiwyR0wUSSX16fMQRS5hy6vY8XSQX8AShnP0AO4cNQtIWMuoCwH4o4nLY7QIBSn1KHi1EjVnHDZK3YpcxmApmOS0tXsI0ms3yhGq1l1ejwW3Yr7aonki1s8Fc8G6047Rh8omEolcMZA4Me5le4zSn1et3w9n9X3sX0cjkgAA0ID%2BjX0LXoGBAIHKQA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h3",{id:"131450d37d0680a1889fefa6fcbb09f8"},"GetAccount"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetAccount($address: String!, $orderBy: [atoms_order_by!]) {\n  account(id: $address) {\n  label\n  image\n  id\n  atomId\n  type\n  atom {\n      id\n  data\n  image\n  label\n  emoji\n  type\n  walletId\n  creator {\n    id\n    label\n    image\n  }\n  }\n\n  claims(\n    order_by: { shares: desc }\n  ) {\n    triple {\n      id\n      label\n    }\n    shares\n    counterShares\n  }\n\n    positions(\n    order_by: { shares: desc }\n  ) {\n    id\n    shares\n    vault {\n      id\n      totalShares\n      currentSharePrice\n      atom {\n        id\n        label\n      }\n      triple {\n        id\n        label\n      }\n    }\n  }\n\n    totalAtoms: createdAtoms_aggregate {\n      aggregate {\n        count\n      }\n    }\n    createdAtoms(order_by: $orderBy) {\n      id\n      data\n      label\n      image\n      type\n      value {\n        person {\n          name\n          image\n          description\n          url\n        }\n        thing {\n          name\n          image\n          description\n          url\n        }\n        organization {\n          name\n          image\n          description\n          url\n        }\n      }\n     vault {\n        positionCount\n        totalShares\n        positions_aggregate {\n          aggregate {\n            count\n            sum {\n              shares\n            }\n          }\n        }\n       positions(where: { accountId: { _eq: $address } }) {\n          id\n          account {\n            label\n            id\n          }\n          shares\n        }\n      }\n    }\n     }\n  }\n}\n\n# Variables\n{\n  "address": "0x...", // change to valid address\n  "orderBy": {\n    "vault": {\n      "totalShares": "desc"\n    }\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoCCUUEMqAFACQCGYYeCAzp%2BkQMoo8ASyQBzAIQAaIowh4w%2BAEIFeAbWYoIcTgH05CvDoBGBcQF0AlEWAAdJESLNqtBkLC8WbDtyu37RABtmIwQAuwchOGZRBHCiNziNLQBJMDiUAgAHWP8kuGs4hwi0-zANZjjI6JyHIJCw-wQ4CAArIXSsmqIAd2YAgPJUuKgOJLwC-2LCwODQ6aqYuIBfZbthoMjOemn9fGMVayJOAAtmb14FTigiFf9facEhTIGJoqKEyaK6uc-bt5OzlxpjQ6Ch8HxTt5VkhppkIJwhCghBAkFsdvI9iZeMAjpCuBcuNc-kR7p8Pv88ZxpgA3ZgwAIoV5veIlZlETQoPoQwFUz4OWB4DiobkcAAKwigXTeeSZbPJbJm9WmDmJb0ezwQsuZ8rZ3wabNVN2hDwgnICFE02l4IwQGgQYAtWl00VEHFEdq1Dhdbo9fgVRBBqGVRt%2BwNGYIdlq2u0MWJkMeUpLlrOZZU5wb1wYWUqKGWywdpAVwnqK2TwnBRJbeSGYiGDb2z9aKlxGTyRKKbDhgeH1CsNauOIlEVaKNbrfO1UUWE7eLeEmXbMJnRW7vYNTbk7qQQgAXhpkfY-f6iGOc3Kp2fU4T54vO0RV03%2ByHmbT6Yyj2y4QjFwBhFwoJsOS5Skmy-RED2dURXQQd0wRHL0oJ9OCP2PQMAOXf54Hg5kAShDCiifN5COfT94XAlEtm6Y58AQbFHGcUFUjonQECwDxWHYLhOBuG4k2PHUFScNDsNqWY134lN-WIhxcKBZcn0NftiVuW4QEkEBaWEYIBk4DAQCPGwQA47wqQwIhDIABgADwAOjswzpAAekcgNTjETVNCIQs3EcLwuLiQyEwIQzsWmQzXwZEKS0MoCAhFIEzMMltDOmZS7CWEAliAA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h2",{id:"131450d37d0680eeb2a6da2841c51f51"},"Triple Queries"),(0,i.kt)("p",null,"There are two primary queries available for retrieving ",(0,i.kt)("inlineCode",{parentName:"p"},"Triple")," data:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetTriples"),": Retrieves a collection of triples based on specified filters and parameters"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetTriple"),": Fetches a single triple by its unique identifier (",(0,i.kt)("inlineCode",{parentName:"li"},"id"),")")),(0,i.kt)("p",null,"We have additional ",(0,i.kt)("inlineCode",{parentName:"p"},"Triple")," queries in our GraphQL package."),(0,i.kt)("h3",{id:"131450d37d06803492e4e232713568c8"},"GetTriples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetTriples(\n  $limit: Int\n  $offset: Int\n  $orderBy: [triples_order_by!]\n  $where: triples_bool_exp\n) {\n  triples(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) {\n    # TripleMetadata fields\n    id\n    label\n    subject {\n      data\n      id\n      image\n      label\n      emoji\n      type\n      creator {\n        label\n        image\n        id\n        atomId\n        type\n      }\n    }\n    predicate {\n      data\n      id\n      image\n      label\n      emoji\n      type\n      creator {\n        label\n        image\n        id\n        atomId\n        type\n      }\n    }\n    object {\n      data\n      id\n      image\n      label\n      emoji\n      type\n      creator {\n        label\n        image\n        id\n        atomId\n        type\n      }\n    }\n    \n    # TripleTxn fields\n    blockNumber\n    blockTimestamp\n    transactionHash\n    creatorId\n    \n    # TripleVaultDetails fields\n    vaultId\n    counterVaultId\n    vault {\n      id\n      totalShares\n      currentSharePrice\n      positionCount\n      atom {\n        id\n        label\n      }\n    }\n    counterVault {\n      id\n      totalShares\n      currentSharePrice\n      positionCount\n      atom {\n        id\n        label\n      }\n    }\n    \n    # Creator fields\n    creator {\n      label\n      image\n      id\n      atomId\n      type\n    }\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoAqeAlgA4A2CAzgBQA6SRRAJPdXNRToiASVQcu3CADNpTcsLEoJPCHjD4AQgWEBtFDQbMA%2Bmo15jAIwIBCALoruAdwAW%2BBMIN1GTKxAj0xggAHrQcAJREwCpeRqx8AkI8CYIANEQycgqqsvIo6Wb4Vjqq6loE6a7uws5ueAiR0ZxcRADERFTeCACy5ACGYH0ofUTS1Aj0YEwqXNRgM0T0fZYTC0wwlgBWCFAoUQtcg8MHRHMn-H0A5ggnSyv0JwhwEJvUJygEtDfNLURQ9UM1Psfr9FstViDfhdridZvNIS1AXARPDQS0Pl8TgBfBY4kG0epgahQIYIYFoo59c6o0HQ75ou4QtFPF5vBEY%2Bmg-4IQF4closH3WGnOBXTlos4IrhIlHCjnY3ELCBbHZ7JoUoZUhGSiWimEIxkPBEs17vT7ilrc3n8hngo0CkVi4U6gUymlo%2BUIvG-b0tBbtTpGCjBThjCZTBaWejQADWADl4Cs8JHo1AYxR%2BMxhnAwiCDH0kEw%2BrtqBAkAAJPpMFwLK0oNSykH%2BjqGRgANT6MHoKAAIv1qPQmKNxpNpiCAG6d7uN35QCAwVD4DtdlAzlqTlc2lou3714b0ADKLj69THaNgeHqqCPJ4QAAUaFALVxaBAmIJS0gAMLz8QIpFblC7qgoaCogr6XBzguKBLlOarUu8ED7jep4nBeV4oCh96Ps%2BRCvu%2BKCfj%2B0EnAB6oCjuIF2mBPoLM2X4AvWfJhqOtaMUC5G-KB2p6rhlHSvWyLAVwnq0c0eJYiAqQgJONDLD4GAgCAWJAA"},"Interact with this query in the Apollo Sandbox")),(0,i.kt)("h3",{id:"131450d37d06803a9edcec28edd52204"},"GetTriple"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetTriple($tripleId: numeric!) {\n  triple(id: $tripleId) {\n    # TripleMetadata fields\n    id\n    label\n    subject {\n      data\n      id\n      image\n      label\n      emoji\n      type\n      creator {\n        label\n        image\n        id\n        atomId\n        type\n      }\n    }\n    predicate {\n      data\n      id\n      image\n      label\n      emoji\n      type\n      creator {\n        label\n        image\n        id\n        atomId\n        type\n      }\n    }\n    object {\n      data\n      id\n      image\n      label\n      emoji\n      type\n      creator {\n        label\n        image\n        id\n        atomId\n        type\n      }\n    }\n    \n    # TripleTxn fields\n    blockNumber\n    blockTimestamp\n    transactionHash\n    creatorId\n    \n    # TripleVaultDetails fields\n    vaultId\n    counterVaultId\n    vault {\n      id\n      totalShares\n      currentSharePrice\n      positionCount\n      atom {\n        id\n        label\n      }\n    }\n    counterVault {\n      id\n      totalShares\n      currentSharePrice\n      positionCount\n      atom {\n        id\n        label\n      }\n    }\n    \n    # Creator fields\n    creator {\n      label\n      image\n      id\n      atomId\n      type\n    }\n  }\n}\n\n# Variables\n{\n  "tripleId": "15"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoAqeAlgA4A2CAFACQo0MICSY6RS8fNSgBCAJRFgAHSREi7OoybVeRNh0Y8J02XKIBiIlUUIAsuQCGYCygtEAZtQT0wAZxl6iKj3voWARs4%2Bcq4w-gBWCFAoksF61rZxct66ntRwFgDmCElEfoH0uQhwEOHUuSgEtDmpelB4CDYQeLG1nvlBbXrpWTWeaWC5ck1wPEPyVX39AL5xs7W0DWDCNgit-UQJFrkpGz3ZuR2FXcWl5V2V1bn1jSjN6xt5AZ2PXhkHXcmDn0QjYz%2BXKaeebAuIQCJRGI6DZbHbfPbvIG%2BZ7HDanMoVSbXBpNFrQx5Hcb7JEDcZ-eGPQG5EF6GlyOKGYycCgAD1kjmcbji-no0AA1gA5eCBPDc3lQPkUdIIVy2OC0OLsCxIVwWaLUCBIAASFlcAAs4jdcf9PAyjBoEAA1CwwegoAAilmo9FcDicLnctQAbja7Sa6hAYKh8NbbSh-XIfWGHqSLhBbPQAMp6iwNT0bWB4BqoZOphAABRoUBJRFoEFc1BQGqQAGFA6hciMY-1dgSUdS5ob6ygQ76oXCKvGLEmU2nrjAs8gULmGoXhCWyxWq5q60GUI27nBm7HXoSunSiAezTWcXcWhyPYbT-d8e1211iQOuuTMVdajT5tMQAAaEA%2BmgBIwrgYCA%2BJSCACicGMGBEOBACMACs4EyF%2B0xAA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h2",{id:"131450d37d0680fb8794f84f731c13ed"},"Positions"),(0,i.kt)("h3",{id:"131450d37d0680b8a990ff417d678766"},"GetPositions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"# Main pagination query\nquery GetPositions(\n  $where: positions_bool_exp\n) {\n  total: positions_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        shares\n      }\n    }\n  }\n  positions(where: $where) {\n    id\n    account {\n      id\n      label\n      image\n    }\n    vault {\n      id\n      atom {\n        id\n        label\n        image\n      }\n      triple {\n        id\n        vault {\n          id\n          positionCount\n          positions_aggregate {\n            aggregate {\n              sum {\n                shares\n              }\n            }\n          }\n        }\n        counterVault {\n          id\n          positionCount\n          positions_aggregate {\n            aggregate {\n              sum {\n                shares\n              }\n            }\n          }\n        }\n        subject {\n          data\n          id\n          label\n          image\n          emoji\n          type\n          value {\n            person {\n              name\n              image\n              description\n              url\n            }\n            thing {\n              name\n              image\n              description\n              url\n            }\n            organization {\n              name\n              image\n              description\n              url\n            }\n          }\n          creator {\n            label\n            image\n            id\n            atomId\n            type\n          }\n        }\n        predicate {\n          data\n          id\n          label\n          image\n          emoji\n          type\n          value {\n            person {\n              name\n              image\n              description\n              url\n            }\n            thing {\n              name\n              image\n              description\n              url\n            }\n            organization {\n              name\n              image\n              description\n              url\n            }\n          }\n          creator {\n            label\n            image\n            id\n            atomId\n            type\n          }\n        }\n        object {\n          data\n          id\n          label\n          image\n          emoji\n          type\n          value {\n            person {\n              name\n              image\n              description\n              url\n            }\n            thing {\n              name\n              image\n              description\n              url\n            }\n            organization {\n              name\n              image\n              description\n              url\n            }\n          }\n          creator {\n            label\n            image\n            id\n            atomId\n            type\n          }\n        }\n      }\n    }\n    shares\n    vaultId\n  }\n}\n\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QGIAEBZAQwEskcAHAgcxIJSIlIEcYEAnATwB0lm32cA4ghQAFCAGcidBuIAU3HDgAkAdwAWbBOnISp9JOID6AIwgQANoYQAPMtwCUOYApwoIKAue1ld0g4apKVgRKWgRZdU1tVQ1gx2dSRRxA4NCUBCcXJJwoCBhULKTxeEzE7MVxNQJg8ULFAF9CxsTmxR9JPzlI4OjuhHjCojBCgihc-JRS8pwhupxzAmMEczmiOCoEJsKANwIYc0mE6dmypNoIOCnpmeHT7IWllbuktY251vKUViIycwyj64na44Xb7Q5zbJA4E6Dr6ADCeQKz2y7T0MgClCCITCV2hyUxqRxALxFRKxJJFSqNQh1w%2BeLptJpDOy41QbAAansDrjAbc8ai-AiJjS2r59EYUtj0jzgZK0v8ReVipdyRTKtUELVkYztdlmeV9Q0acVjAArBBQcG6nBgWgERVQ4EPZYO9aUTbWhBwCCmoiKlDsMgevG7cwsGXXIOscQMCPApAERCKyFu4MUm2aqDfMh%2BZNJGCsJ4Uw2fNQkShx64JpPWlNvWtJMCZ7O5huKAtFkkl7IQVihJBEABetH0lem1bTFNe7rziib4izP1b6ZwHbz3ZwG6zCHOrDHSWdnbx08n0Md0POcAAknySQGg4qSyWyMEwEQoETFbaPA7b07Fi61onoqXo%2Bn61r3qe0yhuGqqRmwMakHB8aJlBZ6prOGYLi2%2BiYWuDYbooKBlkgFbIVWqGYcBbZYYuOa4TR%2BHFnmvb9kOI6xuR46UTR1ErvOdHLumTFdo%2Birbru%2B6KIeeZ8SS56ym415-tCkFidqJYQGaFpWni372kBKnTDJQEYZ63q%2Bv6gZodkMEKg2UaIVJSQTlRZn8c2S4MSuIn0nmxHls5iiubx7npgJOEMHhhbrixfYEAOw5%2BEFOAhSuckUhFXlRYxMUEepeISW4e5cQeAFHuh9ZTkZ1yXje-nWQVOrTAyDLqtSpyggc9UtNwzQgAANCAuzfIsfziBgIAgPUQA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h3",{id:"131450d37d0680abb074da321b5f0ddd"},"GetPosition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetPosition($positionId: String!) {\n  position(id: $positionId) {\n    id\n    account {\n      id\n      label\n      image\n    }\n    vault {\n      id\n      atom {\n        id\n        label\n        image\n      }\n      triple {\n        id\n        vault {\n          id\n          positionCount\n          positions_aggregate {\n            aggregate {\n              sum {\n                shares\n              }\n            }\n          }\n        }\n        counterVault {\n          id\n          positionCount\n          positions_aggregate {\n            aggregate {\n              sum {\n                shares\n              }\n            }\n          }\n        }\n        subject {\n          data\n          id\n          label\n          image\n          emoji\n          type\n          value {\n            person {\n              name\n              image\n              description\n              url\n            }\n            thing {\n              name\n              image\n              description\n              url\n            }\n            organization {\n              name\n              image\n              description\n              url\n            }\n          }\n          creator {\n            label\n            image\n            id\n            atomId\n            type\n          }\n        }\n        predicate {\n          data\n          id\n          label\n          image\n          emoji\n          type\n          value {\n            person {\n              name\n              image\n              description\n              url\n            }\n            thing {\n              name\n              image\n              description\n              url\n            }\n            organization {\n              name\n              image\n              description\n              url\n            }\n          }\n          creator {\n            label\n            image\n            id\n            atomId\n            type\n          }\n        }\n        object {\n          data\n          id\n          label\n          image\n          emoji\n          type\n          value {\n            person {\n              name\n              image\n              description\n              url\n            }\n            thing {\n              name\n              image\n              description\n              url\n            }\n            organization {\n              name\n              image\n              description\n              url\n            }\n          }\n          creator {\n            label\n            image\n            id\n            atomId\n            type\n          }\n        }\n      }\n    }\n    shares\n    vaultId\n  }\n}\n\n\n  # Variables\n  {\n      "positionId": "13-0x000ddc0e1bbfd22d2f0909d4638fec62aafea106"\n    }\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoAKEAzgJYq0RIAUAOkkUQCQAON9jJAEkw6IgGUUeWkgDmAQnYBKIsHac%2BdBk2a1R3TQKYiVajpwt71FzgEMoUCDFSrrNzlfPuiAG1sAjBB83CwBfEM4AN1sYHxRXL3dPbzsUCDgElMswCPc-QODEm3CiiylaHh8ETKyiZNrqGH8AKwQoeLNa7NzvfKCesIGNPAQwWihbFGrOrrqc0t6A-oXBlc4IFraOoe61iz7CrpKs4-dTm2oAC1sR6mtT0JAAGhBo6QCq6gwQGdYQQ20whyGCIfwAjABmAC0AAYAB4wxFgMBQGEIMH%2BfwAMzAACZcXisTCAJwksAAFgAbBCABxYtqU3G2Wz02xgmGUv7sR6hIA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h2",{id:"131450d37d06802483d7c2dc75c5ce86"},"Vaults"),(0,i.kt)("h3",{id:"131450d37d0680fd8298d771fa3004de"},"GetVaults"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetVaults(\n  $where: vaults_bool_exp\n) {\n  vaults_aggregate(\n    where: $where\n  ) {\n    aggregate {\n      count\n    }\n  }\n    vaults {\n      id\n      atom {\n        id\n        label\n      }\n      triple {\n        id\n        subject {\n          id\n          label\n        }\n        predicate {\n          id\n          label\n        }\n        object {\n          id\n          label\n        }\n      }\n      positionCount\n      positions {\n          account {\n            id\n            label\n          }\n          shares\n        }\n      currentSharePrice\n      totalShares\n    }\n  }\n}\n\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoBqAhjADYoDOAFADpJFEAkA7gBb4J0RAG416DAPoAjCBFoSEADwAObAJRFgbDqLqMJVAOaG8CQ1RQJW7DkT4ChPfqe1ENWmxyMmzFhJtdbIigIGFRAogBfV2jPETFGALiOAEswCK8UCDgkoKC0jNtaKikEWkLYvKIUPBTlWn8PKtT05NsGGCkAKwQoFFzmlsKg4tLyto5K5uVTMBSoPwHBgomikrLhqM2Ibt7%2BpsGiFcOiUY3VqaDL22UIBhSUFIgkAGFQ8Lbb%2B8fnhiXmqhQEJhfabfKtE4cM7jE7XKoMXhUUwMTZw4IwPCmVAAZURpgACrUoAhClkUFRaLikQgUXEprFIiAADQgUS1EoNBgYEAgSJAA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h3",{id:"131450d37d0680efb2dcc8c29c493702"},"GetVault"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetVault($vaultId: numeric!) {\n  vault(id: $vaultId) {\n    id\n    atom {\n      id\n      label\n    }\n    triple {\n      id\n      subject {\n        id\n        label\n      }\n      predicate {\n        id\n        label\n      }\n      object {\n        id\n        label\n      }\n    }\n    currentSharePrice\n    totalShares\n  }\n}\n\n# Variables\n{\n  "vaultId": "1"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoBqAhjADYoAUAJAG430CSY6RS8%2BASygBCAJRFgAHSREibOowHcirdii7ipM2USXSdRKighwJ%2Bg7rDmDtKgCMEta0QC%2BzlHgEAHWgjPaDPQCdAGcYOwArBCgUfwsdIPjZWwcnYNk3dKIvPAQwISM-LSTLZxt7RzLXKohI6NjipMSklMqszIMOnVg8XNQAZQALKlyABU8oBHcIFCpaIZGEEPNMzJAAGhA2T3tfEIwQRskttS5jnmOARmPpFxAXIA"},"Interact with this query in Apollo Sandbox")),(0,i.kt)("h2",{id:"131450d37d06808d8afeebe09521412e"},"\u201cUtility\u201d Queries"),(0,i.kt)("p",null,"Our \u201cutility\u201d queries don\u2019t necessarily fall into the other categories but are examples of how you can query for specific purpose data. "),(0,i.kt)("p",null,"We have several more queries in our GraphQL package."),(0,i.kt)("h3",{id:"131450d37d0680379ff6ef4f91d25816"},"GetEvents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetEvents($where: events_bool_exp, $addresses: [String!]) {\n  total: events_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  events(where: $where) {\n    id\n    blockNumber\n    blockTimestamp\n    type\n    transactionHash\n    atomId\n    tripleId\n    depositId\n    redemptionId\n    atom {\n      id\n      data\n      image\n      label\n      emoji\n      type\n      walletId\n      creator {\n        id\n        label\n        image\n      }\n      value {\n        person {\n          name\n          image\n          description\n          url\n        }\n        thing {\n          name\n          image\n          description\n          url\n        }\n        organization {\n          name\n          image\n          description\n          url\n        }\n      }\n      vault {\n        totalShares\n        positionCount\n        positions(where: { account: { id: { _in: $addresses } } }) {\n          accountId\n          shares\n          account {\n            id\n            label\n            image\n          }\n        }\n      }\n    }\n    triple {\n      id\n      label\n      creator {\n        label\n        image\n        id\n        atomId\n        type\n      }\n      subject {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        value {\n          person {\n            name\n            image\n            description\n            url\n          }\n          thing {\n            name\n            image\n            description\n            url\n          }\n          organization {\n            name\n            image\n            description\n            url\n          }\n        }\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      predicate {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        value {\n          person {\n            name\n            image\n            description\n            url\n          }\n          thing {\n            name\n            image\n            description\n            url\n          }\n          organization {\n            name\n            image\n            description\n            url\n          }\n        }\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      object {\n        data\n        id\n        image\n        label\n        emoji\n        type\n        value {\n          person {\n            name\n            image\n            description\n            url\n          }\n          thing {\n            name\n            image\n            description\n            url\n          }\n          organization {\n            name\n            image\n            description\n            url\n          }\n        }\n        creator {\n          label\n          image\n          id\n          atomId\n          type\n        }\n      }\n      vault {\n        totalShares\n        positionCount\n        positions(where: { account: { id: { _in: $addresses } } }) {\n          accountId\n          shares\n          account {\n            id\n            label\n            image\n          }\n        }\n      }\n      counterVault {\n        totalShares\n        positionCount\n        positions(where: { account: { id: { _in: $addresses } } }) {\n          accountId\n          shares\n          account {\n            id\n            label\n            image\n          }\n        }\n      }\n    }\n    deposit {\n      senderId\n      sender {\n        id\n      }\n      sharesForReceiver\n      senderAssetsAfterTotalFees\n      vault {\n        totalShares\n        positionCount\n        positions(where: { account: { id: { _in: $addresses } } }) {\n          accountId\n          shares\n          account {\n            id\n            label\n            image\n          }\n        }\n      }\n    }\n    redemption {\n      senderId\n      sender {\n        id\n      }\n    }\n  }\n}\n\n# Variables\n\n{\n  "addresses": ["0x..."]\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.i7n.app%2Fv1%2Fgraphql&explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAOIIoCiAbsigM4AUAJAO4AW%2BC6RCNqdAfQBGECABsBCAB4AHADREmAQzBg8COnQ3cA2gGUUeAJZIA5gEIAugEoiwADpIiRFBBRKx3XrUFLTp9VMlFAQGdk5uVg51WwcnZyI-AIQgkLtHBISoCBhUDISAX3yi%2BO9%2BMOiuRXCY9PjnIzB85yExaABrADl4IXxmolaOgBUjRDp3OBl%2BlAIZBGm8JSQ6JSgUIwgkAAklOjZ%2B4Ig4AEkm%2BpdjGTEEU-6wBBkIOiMUW-P1e8n1zbfMw7g6pkGmcgUQwMElP0GnA-PNzs4xEpemIoTw4BAAFZGVEzOaolgea6vEFAqDqQ54QGgoiNVEIpEIFHwhKjWGokqgqgeXBU0FzPB0Ta86lIJSIOksmGmOHUhL3Ohkowyb5ICXOGB4JmyjnUlBsEymYWg0Xi5mZVnStVgjSK5UbVVmhIarXUnWgiB4IJIIwAL2C9qNQJNMtlNKlIdl8ttKqtzolbsKqK5MDEKEDzlc7jEejYSnUdAlj2eKoAwjk8o6iy97YwalVgIkoNlcihuA3Gm2iAITJEVGoNFo6EQCsPh7Eratm6hfqG9nmNBOm%2BW03FQyySWvEcirdC2Y7nAnMofh-0E4YlddA7TmVvGaiyQgKemiLeXaCLRGgdfZf8Z6DcZ%2BB6onQMBCBiCBrM%2B4LuBK37Uh%2BEqvhKCDoliEoARKXJiDyq6hvygpOLha7BjuYZ7muzhRpcMb7k6mpWsemR6gaz6ZCRtG7paHHWgq1H2qRca0YxCQel6vr%2BkKRGhuxFFkVxslUUqNGyYJa7CcJD5PlJoJIbRCF6Ru1K-oZ-6zIBibMseMgfEYUDBAgUEQrBJmSuR1K6bKKGYtijoYY6WE4Va%2BGSaRMkUfpCk2nxmwCfRQlWsxZisQkYVrhFFGKXaMXcapobCc4olLOJKrJc4qWhula6ZcpFG5dq8YSppriUtpQIeRV4ZWnBP6uCcLlMWZDWWaiEBgRBK4StBkKOt1X6dY67Wgl5aG%2BYN-ncg5rWZMFhGhWK5nvvNkW8Up-E5XFakJfqSVbUG%2B2kZVobVWdKkXXlVqFd6folbdbH3dxj2RlFp3Za9b6ukNspNR6yWLfBR0Vf1CTGQla31cNzLJqmz6Zh4ObzgWlZPNWmxli2hbEyqtaVJ2k7Lp2HZ2F2PaKH2%2BaDqOI4FOOtF0y2f7UnO%2BaLlOE0A0jmRw7KgNAup7L3su%2BAAGpKCmYuyrj2a5sLRPFvaZMVrKVZUxUERM3zqAM2AnbdkgvaqOzGic2OyUW8SVpCwuvNLi2pU0hLCRS-Dbno6HsunncDyU4GWhIPceAC84sfx8%2Bs1Acynt0AAYh6ABKEEIEYNB4MByDxwAgpo5B0OXABmIR4EMbgeFnCBe5yqvY7dmv4zrRuU-ry4U3rmzU2bDZu1bNss8oDsDk7XMu79jai4nQKZyLy5%2B2n7kMuD0sI2HoLHgmCYfChWW7RnZf4Gvyf4KnLmn8UjglCAcggFyxhItcdAYCAuF7AgDZvPAsGAiA6CAQABikAAOngUAywr8QAFCAA"},"Interact with this query in Apollo Sandbox")))}g.isMDXComponent=!0}}]);