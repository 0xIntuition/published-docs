"use strict";(self.webpackChunkdocu_notion_sample_site=self.webpackChunkdocu_notion_sample_site||[]).push([[1931],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9781:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"Triples",sidebar_position:1,slug:"/triples"},i=void 0,s={unversionedId:"Key-Concepts/triples",id:"Key-Concepts/triples",title:"Triples",description:"Triples are constructs that combine three Atoms to form a relationship or assertion.  They follow a simple Predicate-Subject-Object format.  This format is easy for people to understand, and is austere enough to enable logical reasoning and inference for a variety of computer programs.",source:"@site/docs/contracts/Key-Concepts/triples.md",sourceDirName:"Key-Concepts",slug:"/triples",permalink:"/fr/contracts/triples",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Triples",sidebar_position:1,slug:"/triples"},sidebar:"contractsSidebar",previous:{title:"Atoms",permalink:"/fr/contracts/atoms"},next:{title:"Vaults",permalink:"/fr/contracts/vaults"}},l={},p=[],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Triples are constructs that combine three Atoms to form a relationship or assertion.  They follow a simple Predicate-Subject-Object format.  This format is easy for people to understand, and is austere enough to enable logical reasoning and inference for a variety of computer programs."),(0,a.kt)("p",null,"Triples connect three Atoms to express a fact or relationship between entities.  Triples comprise of many similarities to Atoms in that they are indexed the same way (Atom ID vs Triple ID) and contain numerous Vaults with various Bonding Curves.  An ID which can refer to either an Atom or a Triple is called a Term ID.  In other words, a Term could be something like \u201cBob\u201d, or a Term could be something like \u201cBob Is Friend.\u201d  But \u201cBob\u201d will always be an Atom, and \u201cBob Is Friend\u201d will always be a Triple."),(0,a.kt)("p",null,"However, instead of containing a URI like an Atom does, Triples contain a set of 3 Term IDs.  The most general use case would be 3 Atom IDs, as in \u201cBob Is Friend.\u201d  Let\u2019s say we have Atom IDs for \u201cBob\u201d ","[32]",", \u201cIs\u201d ","[4]",", and \u201cFriend\u201d ","[409]","."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Subject"),(0,a.kt)("th",{parentName:"tr",align:null},"Predicate"),(0,a.kt)("th",{parentName:"tr",align:null},"Object"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Bob ","[32]"),(0,a.kt)("td",{parentName:"tr",align:null},"Is ","[4]"),(0,a.kt)("td",{parentName:"tr",align:null},"Friend ","[409]")))),(0,a.kt)("p",null,"This Triple might have the ID of 1,010,321."),(0,a.kt)("p",null,"A more complex use case, using nested Triples, might look like \u201c","[Link To Twitter Post]"," Disproves \u2018Bob Is Friend\u2019\u201d"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Subject"),(0,a.kt)("th",{parentName:"tr",align:null},"Predicate"),(0,a.kt)("th",{parentName:"tr",align:null},"Object"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"http://x.com/post/938492"},"x.com/post/938492")," ","[8,407]"),(0,a.kt)("td",{parentName:"tr",align:null},"Disproves ","[19]"),(0,a.kt)("td",{parentName:"tr",align:null},"Bob Is Friend ","[1,010,321]")))),(0,a.kt)("p",null,"The beauty if this system is that it maintains a record of things which have been stated, yet allows information to be added over time which refines the \u201csignal\u201d and facilitates the refinement of truth."),(0,a.kt)("p",null,"One other thing Triples have which Atoms do not is called Counter Triples.  While a statement like \u201cBob Is Friend\u201d can have a negative, a singular concept like \u201cBob\u201d cannot.  There is no such thing as \u201cNot Bob\u201d.  In order to keep things more organized in the Intuition System, we prefer to use Counter Triples to keep negative signal closely associated with its corresponding positive signal.  So Triples have both positive and negative vaults, but Atoms only have vaults."))}u.isMDXComponent=!0}}]);