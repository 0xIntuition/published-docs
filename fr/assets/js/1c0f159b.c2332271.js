"use strict";(self.webpackChunkdocu_notion_sample_site=self.webpackChunkdocu_notion_sample_site||[]).push([[2757],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),s=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,c=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,l(l({ref:e},p),{},{components:n})):a.createElement(h,l({ref:e},p))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2751:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"Getting Started",sidebar_position:0,slug:"/contracts-start"},l=void 0,o={unversionedId:"Contract-Interactions/contracts-start",id:"Contract-Interactions/contracts-start",title:"Getting Started",description:"This guide walks through the steps needed to get started interacting with the Intuition contracts in a TypeScript/React setting. The guides following this page will assume that you\u2019ve completed this scaffolding and configuration.",source:"@site/docs/dev/Contract-Interactions/contracts-start.md",sourceDirName:"Contract-Interactions",slug:"/contracts-start",permalink:"/fr/dev/contracts-start",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Getting Started",sidebar_position:0,slug:"/contracts-start"},sidebar:"contractsSidebar",previous:{title:"GraphQL Mutations",permalink:"/fr/dev/mutations"},next:{title:"Create Atom",permalink:"/fr/dev/create-atom"}},c={},s=[{value:"Contract Addresses",id:"163450d37d0681dfb232d3eecedcf4d0",level:2},{value:"Multivault ABI",id:"163450d37d0681e5958fcc3943a24236",level:2},{value:"Scaffolding Contract Interactions",id:"163450d37d0681648d91ec3cb86630a8",level:2},{value:"useMultivaultContract Hook",id:"163450d37d0681c78b1fcdfec521ed35",level:3},{value:"Viem Scaffolding",id:"163450d37d0681519257e193534a2af6",level:2},{value:"Environment Variables",id:"163450d37d0681aa9591ccc8f0aad030",level:3},{value:"Implementation",id:"163450d37d0681929933ff0feb51455e",level:3},{value:"Next Steps",id:"163450d37d068105b9e3f0dc5a0ef7f3",level:2}],p={toc:s};function u(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide walks through the steps needed to get started interacting with the Intuition contracts in a TypeScript/React setting. The guides following this page will assume that you\u2019ve completed this scaffolding and configuration."),(0,r.kt)("h2",{id:"163450d37d0681dfb232d3eecedcf4d0"},"Contract Addresses"),(0,r.kt)("p",null,"Intuition is currently deployed on Base Mainnet and Base Sepolia Testnet. You can find the chain information and contract addresses here:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Chain")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Chain ID")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Contract Address")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Type")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Explorer")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Base"),(0,r.kt)("td",{parentName:"tr",align:null},"8453"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x430BbF52503Bd4801E51182f4cB9f8F534225DE5")),(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://basescan.org/"},"https://basescan.org/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Base Sepolia"),(0,r.kt)("td",{parentName:"tr",align:null},"84532"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x1A6950807E33d5bC9975067e6D6b5Ea4cD661665")),(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://sepolia.basescan.org/"},"https://sepolia.basescan.org/"))))),(0,r.kt)("h2",{id:"163450d37d0681e5958fcc3943a24236"},"Multivault ABI"),(0,r.kt)("p",null,"In addition to the contract address you\u2019ll need the EthMultivault ABI. The code block is too large to include in these docs, but we recommend the following approach:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"multivault.ts")," file in a path such as ",(0,r.kt)("inlineCode",{parentName:"li"},"app/lib/abis")),(0,r.kt)("li",{parentName:"ul"},"Export the ABI as a ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," array:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const multivaultAbi = [\n    {...},\n    {...},\n]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Note:")," The actual ABI values are included inside the\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"{...}"),"\xa0in the above example.")),(0,r.kt)("p",null,"You\u2019ll need to export with this structure to work with ",(0,r.kt)("inlineCode",{parentName:"p"},"viem")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wagmi")," and to have type inference and ABI support. "),(0,r.kt)("p",null,"For a full example you can look at a reference implementation in our monorepo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/0xIntuition/intuition-ts/blob/main/apps/portal/app/lib/abis/multivault.ts"},"https://github.com/0xIntuition/intuition-ts/blob/main/apps/portal/app/lib/abis/multivault.ts"))),(0,r.kt)("h2",{id:"163450d37d0681648d91ec3cb86630a8"},"Scaffolding Contract Interactions"),(0,r.kt)("p",null,"Once you have the contract address and the ABI exported from a ",(0,r.kt)("inlineCode",{parentName:"p"},".ts")," file you\u2019re ready to scaffold the contract interactions."),(0,r.kt)("p",null,"The following guide focuses on what you need to start interacting with the ",(0,r.kt)("strong",{parentName:"p"},"[Problem Internal Link]")," contract in a TypeScript context."),(0,r.kt)("h3",{id:"163450d37d0681c78b1fcdfec521ed35"},"useMultivaultContract Hook"),(0,r.kt)("p",null,"If you\u2019re working in a React app we have a hook that you can use to scaffold your contract interactions. This hook leverages ",(0,r.kt)("inlineCode",{parentName:"p"},"getContract")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"viem")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePublicClient")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"wagmi")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { multivaultAbi } from '@lib/abis/multivault'\nimport { getContract } from 'viem'\nimport { usePublicClient } from 'wagmi'\n\nexport const getMultivaultContractConfig = (contract?: string) => ({\n  address:\n    (contract as `0x${string}`) ||\n    (`0x1A6950807E33d5bC9975067e6D6b5Ea4cD661665` as `0x${string}`),\n  abi: multivaultAbi,\n})\n\nexport function useMultivaultContract(contract?: string, chainId?: number) {\n  const publicClient = usePublicClient({ chainId })\n\n  if (!publicClient) {\n    console.error('No publicClient found.')\n    return null\n  }\n\n  return getContract({\n    ...getMultivaultContractConfig(\n      contract ||\n        (`0x1A6950807E33d5bC9975067e6D6b5Ea4cD661665` as `0x${string}`),\n    ),\n    client: {\n      public: publicClient,\n    },\n  })\n}\n\n")),(0,r.kt)("p",null,"Once you\u2019ve created this hook you\u2019re then able to use it in both contract reads and writes.  Here\u2019s a snippet showing how you can use the hook:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useMultivaultContract } from './useMultivaultContract'\n\nexport const useCreateAtom = () => {\n  const multivault = useMultivaultContract(\n    baseSepolia.id\n  ) as GetContractReturnType\n\n  return useContractWriteAndWait({\n    ...multivault,\n    functionName: 'createAtom',\n  })\n}\n")),(0,r.kt)("p",null,"The specific contract interactions are covered in more detail in each page, such as ",(0,r.kt)("a",{parentName:"p",href:"/create-atom"},"Create Atom"),"."),(0,r.kt)("h2",{id:"163450d37d0681519257e193534a2af6"},"Viem Scaffolding"),(0,r.kt)("p",null,"We recommend additional ",(0,r.kt)("inlineCode",{parentName:"p"},"viem")," configuration in addition to the EthMultiVault contract scaffolding. "),(0,r.kt)("h3",{id:"163450d37d0681aa9591ccc8f0aad030"},"Environment Variables"),(0,r.kt)("p",null,"This guide and reference implementation include references to environment variables that you\u2019ll need to set in your app\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},".env"),". You can rename these to whatever name you prefer, but you\u2019ll need to ensure that the name matches."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# .env\n\nALCHEMY_BASE_SEPOLIA_RPC_URL=\nALCHEMY_BASE_RPC_URL=\n")),(0,r.kt)("p",null,"You can set the contract address into a constant as well, such as:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MULTIVAULT_CONTRACT_ADDRESS")),(0,r.kt)("p",null,"We recommend taking this approach for reusability across your app. This example also includes a ",(0,r.kt)("inlineCode",{parentName:"p"},"CURRENT_ENV")," variable that is set to your deployment environment (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"'development'"),") to set the proper RPC URL in the Public Client configuration."),(0,r.kt)("h3",{id:"163450d37d0681929933ff0feb51455e"},"Implementation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { multivaultAbi } from '@lib/abis/multivault'\nimport {\n  CURRENT_ENV,\n  MULTIVAULT_CONTRACT_ADDRESS,\n} from 'app/consts'\nimport {\n  createPublicClient,\n  getContract,\n  http,\n  PublicClient,\n  type Abi,\n} from 'viem'\nimport { base, baseSepolia } from 'viem/chains'\n\nexport const publicClient: PublicClient = createPublicClient({\n  batch: {\n    multicall: true,\n  },\n  chain: CURRENT_ENV === 'development' ? baseSepolia : base,\n  transport: http(\n    CURRENT_ENV === 'development'\n      ? process.env.ALCHEMY_BASE_SEPOLIA_RPC_URL\n      : process.env.ALCHEMY_BASE_RPC_URL,\n    },\n  ),\n}) as PublicClient\n\nexport const getMultivaultContract = getContract({\n  address: MULTIVAULT_CONTRACT_ADDRESS as `0x${string}`,\n  abi: multivaultAbi as Abi,\n  client: {\n    public: publicClient,\n  },\n})\n\nexport const createMultiVaultContract = (contractAddress: string) =>\n  ({\n    address: contractAddress as `0x${string}`,\n    abi: multivaultAbi as Abi,\n  }) as const\n\nexport const multiVaultContract = {\n  address: MULTIVAULT_CONTRACT_ADDRESS as `0x${string}`,\n  abi: multivaultAbi as Abi,\n} as const\n")),(0,r.kt)("p",null,"For a full example you can look at a reference implementation in our monorepo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/0xIntuition/intuition-ts/blob/main/apps/portal/app/.server/viem.ts"},"https://github.com/0xIntuition/intuition-ts/blob/main/apps/portal/app/.server/viem.ts"))),(0,r.kt)("h2",{id:"163450d37d068105b9e3f0dc5a0ef7f3"},"Next Steps"),(0,r.kt)("p",null,"Once you\u2019ve added this scaffolding and configuration to your application you\u2019ll have what you need to start interacting onchain Intuition primitives. Each contract interaction page guide assumes that you\u2019ll have already completed this scaffolding and have the ",(0,r.kt)("inlineCode",{parentName:"p"},"useMultivaultContract")," hook set up."),(0,r.kt)("p",null,"See also:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/create-atom"},"Create Atom")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/create-triple"},"Create Triple")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/attest-atom"},"Attest Atom")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/attest-triple"},"Attest Triple"))))}u.isMDXComponent=!0}}]);